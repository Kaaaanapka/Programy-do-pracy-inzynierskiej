import pyaudio
import wave
import matplotlib.pyplot as plt
import numpy as np
import math
from scipy.signal import find_peaks
from scipy import signal
 


FRAMES_PER_BUFFER = 3200
FORMAT = pyaudio.paInt16
CHANNELS = 1 
RATE = 16000

pa = pyaudio.PyAudio()

stream = pa.open(
    format=FORMAT,
    channels=CHANNELS,
    rate=RATE,
    input=True,
    frames_per_buffer=FRAMES_PER_BUFFER
)

print('Nagrywanie')

seconds = 3
frames = []
second_tracking = 0
second_count = 0

for i in range(0, int(RATE/FRAMES_PER_BUFFER*seconds)):
    data = stream.read(FRAMES_PER_BUFFER)
    frames.append(data)
    second_tracking += 1
    if second_tracking == RATE/FRAMES_PER_BUFFER:
        second_count += 1
        second_tracking = 0
        print(f'Pozostało: {seconds - second_count}' ' sekund')

stream.stop_stream()
stream.close()
pa.terminate()

obj = wave.open('próbka.wav', 'wb')
obj.setnchannels(CHANNELS)
obj.setsampwidth(pa.get_sample_size(FORMAT))
obj.setframerate(RATE)
obj.writeframes(b''.join(frames))
obj.close()




file = wave.open('próbka.wav', 'rb')

sample_freq = file.getframerate()
frames = file.getnframes()
signal_wave = file.readframes(-1)

file.close()

time = frames / sample_freq

# z zaleznosci od kanału 1 użyj int16 w 2 użyj int32
audio_array = np.frombuffer(signal_wave, dtype=np.int16)

times = np.linspace(0, time, num=frames)

plt.figure(figsize=(15, 5))
plt.plot(times, audio_array)
plt.ylabel('Fala dźwieku')
plt.xlabel('Czas (w s)')
plt.xlim(0, time)
plt.title('Próbka którą nagrałem')

# ymin, ymax = plt.ylim()


#Narazie wyszukuje Ymin i Ymax
# s = 'Maksymalne (Y) wystąpiło dla wartości = ' + str(ymax) + '\n' + \
#    'Minimalne (Y) wystąpiło dla wartości =  ' + str(ymin) + ' '

Ymax=np.max(audio_array)
DlaX = np.interp(Ymax, audio_array, times)

# log=10*math.log10(Ymax)
print('Maksymalna wartość dla (Y) to: '+ str(Ymax))


# print(s)
print('Dla x równego '+ str(DlaX) ) 
# print log


plt.show()
